package Lex;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

  public final Class getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
          unpackFromStrings(new String[] {
                  "\000\134\000\002\002\004\000\002\002\004\000\002\002" +
                          "\004\000\002\002\002\000\002\003\006\000\002\004\005" +
                          "\000\002\006\004\000\002\010\005\000\002\010\002\000" +
                          "\002\007\003\000\002\007\005\000\002\011\003\000\002" +
                          "\011\005\000\002\011\006\000\002\053\003\000\002\053" +
                          "\006\000\002\030\004\000\002\030\002\000\002\051\003" +
                          "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
                          "\002\052\003\000\002\014\006\000\002\005\004\000\002" +
                          "\005\002\000\002\016\004\000\002\016\002\000\002\015" +
                          "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
                          "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
                          "\002\015\003\000\002\017\007\000\002\017\011\000\002" +
                          "\020\012\000\002\021\007\000\002\022\004\000\002\023" +
                          "\004\000\002\024\005\000\002\025\004\000\002\027\003" +
                          "\000\002\027\002\000\002\026\003\000\002\031\004\000" +
                          "\002\033\005\000\002\033\002\000\002\032\003\000\002" +
                          "\032\005\000\002\034\003\000\002\034\005\000\002\035" +
                          "\003\000\002\035\005\000\002\035\005\000\002\036\003" +
                          "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
                          "\002\036\005\000\002\037\003\000\002\037\005\000\002" +
                          "\037\005\000\002\040\003\000\002\040\005\000\002\040" +
                          "\005\000\002\041\004\000\002\041\004\000\002\041\004" +
                          "\000\002\041\003\000\002\042\004\000\002\042\003\000" +
                          "\002\042\006\000\002\042\005\000\002\042\003\000\002" +
                          "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
                          "\005\000\002\043\004\000\002\044\004\000\002\013\005" +
                          "\000\002\013\002\000\002\012\004\000\002\045\005\000" +
                          "\002\045\004\000\002\046\004\000\002\050\005\000\002" +
                          "\050\002\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
          unpackFromStrings(new String[] {
                  "\000\237\000\014\002\ufffe\004\010\005\012\006\013\007" +
                          "\011\001\002\000\004\002\241\001\002\000\004\010\016" +
                          "\001\002\000\014\002\ufffe\004\010\005\012\006\013\007" +
                          "\011\001\002\000\014\002\ufffe\004\010\005\012\006\013" +
                          "\007\011\001\002\000\004\010\uffef\001\002\000\004\010" +
                          "\uffec\001\002\000\004\010\uffee\001\002\000\004\010\uffed" +
                          "\001\002\000\004\002\uffff\001\002\000\004\002\000\001" +
                          "\002\000\052\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
                          "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
                          "\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\047\uffeb" +
                          "\050\uffeb\051\uffeb\001\002\000\004\042\240\001\002\000" +
                          "\010\024\227\042\ufff8\043\ufff8\001\002\000\014\024\ufff6" +
                          "\042\ufff6\043\ufff6\044\034\050\030\001\002\000\006\042" +
                          "\ufff9\043\023\001\002\000\004\010\016\001\002\000\004" +
                          "\042\ufffb\001\002\000\014\024\ufff6\042\ufff6\043\ufff6\045" +
                          "\ufff6\050\030\001\002\000\006\042\ufff9\043\023\001\002" +
                          "\000\004\042\ufffa\001\002\000\006\020\031\051\032\001" +
                          "\002\000\004\051\033\001\002\000\012\024\ufff5\042\ufff5" +
                          "\043\ufff5\045\ufff5\001\002\000\012\024\ufff4\042\ufff4\043" +
                          "\ufff4\045\ufff4\001\002\000\014\004\010\005\012\006\013" +
                          "\007\011\045\215\001\002\000\004\046\036\001\002\000" +
                          "\056\004\010\005\012\006\013\007\011\010\uffe8\011\uffe8" +
                          "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
                          "\uffe8\022\uffe8\023\uffe8\025\uffe8\036\uffe8\037\uffe8\042\uffe8" +
                          "\044\uffe8\046\uffe8\047\uffe8\001\002\000\014\002\ufffd\004" +
                          "\ufffd\005\ufffd\006\ufffd\007\ufffd\001\002\000\046\010\uffd0" +
                          "\011\053\013\064\014\050\015\056\016\044\017\051\020" +
                          "\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037\uffd0" +
                          "\042\uffd4\044\uffd0\046\036\047\uffe6\001\002\000\004\010" +
                          "\016\001\002\000\056\004\010\005\012\006\013\007\011" +
                          "\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
                          "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\036\uffe8" +
                          "\037\uffe8\042\uffe8\044\uffe8\046\uffe8\047\uffe8\001\002\000" +
                          "\046\010\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
                          "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\036" +
                          "\uffe9\037\uffe9\042\uffe9\044\uffe9\046\uffe9\047\uffe9\001\002" +
                          "\000\004\042\214\001\002\000\050\010\uffe2\011\uffe2\012" +
                          "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
                          "\021\uffe2\022\uffe2\023\uffe2\025\uffe2\036\uffe2\037\uffe2\042" +
                          "\uffe2\044\uffe2\046\uffe2\047\uffe2\001\002\000\006\042\uffd5" +
                          "\045\uffd5\001\002\000\024\010\016\020\134\021\135\022" +
                          "\123\023\130\025\122\036\120\037\133\044\125\001\002" +
                          "\000\004\044\113\001\002\000\026\010\uffd0\020\uffd0\021" +
                          "\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037\uffd0\042\uffd4" +
                          "\044\uffd0\001\002\000\050\010\uffe5\011\uffe5\012\uffe5\013" +
                          "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
                          "\022\uffe5\023\uffe5\025\uffe5\036\uffe5\037\uffe5\042\uffe5\044" +
                          "\uffe5\046\uffe5\047\uffe5\001\002\000\004\044\103\001\002" +
                          "\000\014\042\uffd3\043\uffd3\045\uffd3\047\uffd3\051\uffd3\001" +
                          "\002\000\050\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
                          "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
                          "\uffdf\025\uffdf\036\uffdf\037\uffdf\042\uffdf\044\uffdf\046\uffdf" +
                          "\047\uffdf\001\002\000\004\042\102\001\002\000\004\042" +
                          "\101\001\002\000\050\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
                          "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
                          "\uffe1\023\uffe1\025\uffe1\036\uffe1\037\uffe1\042\uffe1\044\uffe1" +
                          "\046\uffe1\047\uffe1\001\002\000\050\010\uffe4\011\uffe4\012" +
                          "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
                          "\021\uffe4\022\uffe4\023\uffe4\025\uffe4\036\uffe4\037\uffe4\042" +
                          "\uffe4\044\uffe4\046\uffe4\047\uffe4\001\002\000\050\010\uffe3" +
                          "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
                          "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3\036\uffe3" +
                          "\037\uffe3\042\uffe3\044\uffe3\046\uffe3\047\uffe3\001\002\000" +
                          "\050\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
                          "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\025" +
                          "\uffde\036\uffde\037\uffde\042\uffde\044\uffde\046\uffde\047\uffde" +
                          "\001\002\000\004\044\072\001\002\000\046\010\uffd0\011" +
                          "\053\013\064\014\050\015\056\016\044\017\051\020\uffd0" +
                          "\021\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037\uffd0\042" +
                          "\uffd4\044\uffd0\046\036\047\uffe6\001\002\000\050\010\uffe0" +
                          "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
                          "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\036\uffe0" +
                          "\037\uffe0\042\uffe0\044\uffe0\046\uffe0\047\uffe0\001\002\000" +
                          "\004\047\070\001\002\000\062\002\uffea\004\uffea\005\uffea" +
                          "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
                          "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
                          "\023\uffea\025\uffea\036\uffea\037\uffea\042\uffea\044\uffea\046" +
                          "\uffea\047\uffea\001\002\000\004\047\uffe7\001\002\000\026" +
                          "\010\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\036" +
                          "\uffd0\037\uffd0\042\uffd4\044\uffd0\001\002\000\004\042\074" +
                          "\001\002\000\026\010\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
                          "\uffd0\025\uffd0\036\uffd0\037\uffd0\042\uffd4\044\uffd0\001\002" +
                          "\000\004\042\076\001\002\000\026\010\uffd0\020\uffd0\021" +
                          "\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037\uffd0\044\uffd0" +
                          "\045\uffd4\001\002\000\004\045\100\001\002\000\050\010" +
                          "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
                          "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025\uffdb\036" +
                          "\uffdb\037\uffdb\042\uffdb\044\uffdb\046\uffdb\047\uffdb\001\002" +
                          "\000\050\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
                          "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
                          "\025\uffd6\036\uffd6\037\uffd6\042\uffd6\044\uffd6\046\uffd6\047" +
                          "\uffd6\001\002\000\050\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
                          "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
                          "\uffd9\023\uffd9\025\uffd9\036\uffd9\037\uffd9\042\uffd9\044\uffd9" +
                          "\046\uffd9\047\uffd9\001\002\000\024\010\uffd0\020\uffd0\021" +
                          "\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037\uffd0\044\uffd0" +
                          "\001\002\000\004\045\105\001\002\000\044\010\uffd0\011" +
                          "\053\013\064\014\050\015\056\016\044\017\051\020\uffd0" +
                          "\021\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037\uffd0\042" +
                          "\uffd4\044\uffd0\046\036\001\002\000\050\010\uffdd\011\uffdd" +
                          "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
                          "\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\036\uffdd\037\uffdd" +
                          "\042\uffdd\044\uffdd\046\uffdd\047\uffdd\001\002\000\044\010" +
                          "\uffd0\011\053\013\064\014\050\015\056\016\044\017\051" +
                          "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037" +
                          "\uffd0\042\uffd4\044\uffd0\046\036\001\002\000\050\010\uffdc" +
                          "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
                          "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\025\uffdc\036\uffdc" +
                          "\037\uffdc\042\uffdc\044\uffdc\046\uffdc\047\uffdc\001\002\000" +
                          "\004\042\112\001\002\000\050\010\uffd7\011\uffd7\012\uffd7" +
                          "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
                          "\uffd7\022\uffd7\023\uffd7\025\uffd7\036\uffd7\037\uffd7\042\uffd7" +
                          "\044\uffd7\046\uffd7\047\uffd7\001\002\000\024\010\uffd0\020" +
                          "\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037\uffd0" +
                          "\044\uffd0\001\002\000\004\045\115\001\002\000\044\010" +
                          "\uffd0\011\053\013\064\014\050\015\056\016\044\017\051" +
                          "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037" +
                          "\uffd0\042\uffd4\044\uffd0\046\036\001\002\000\050\010\uffda" +
                          "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
                          "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\025\uffda\036\uffda" +
                          "\037\uffda\042\uffda\044\uffda\046\uffda\047\uffda\001\002\000" +
                          "\022\024\uffcf\034\143\035\uffcf\042\uffcf\043\uffcf\045\uffcf" +
                          "\047\uffcf\051\uffcf\001\002\000\024\010\016\020\134\021" +
                          "\135\022\123\023\130\025\122\036\120\037\133\044\125" +
                          "\001\002\000\052\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
                          "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
                          "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\176\045\uffb8\047" +
                          "\uffb8\050\177\051\uffb8\001\002\000\024\010\016\020\134" +
                          "\021\135\022\123\023\130\025\122\036\120\037\133\044" +
                          "\125\001\002\000\046\024\uffb3\026\uffb3\027\uffb3\030\uffb3" +
                          "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
                          "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\047\uffb3" +
                          "\051\uffb3\001\002\000\042\024\uffc8\026\uffc8\027\uffc8\030" +
                          "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\155" +
                          "\037\156\042\uffc8\043\uffc8\045\uffc8\047\uffc8\051\uffc8\001" +
                          "\002\000\024\010\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
                          "\025\uffd0\036\uffd0\037\uffd0\044\uffd0\001\002\000\046\024" +
                          "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
                          "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\161\041\160\042" +
                          "\uffc3\043\uffc3\045\uffc3\047\uffc3\051\uffc3\001\002\000\036" +
                          "\024\uffcb\026\uffcb\027\uffcb\030\150\031\152\032\153\033" +
                          "\151\034\uffcb\035\uffcb\042\uffcb\043\uffcb\045\uffcb\047\uffcb" +
                          "\051\uffcb\001\002\000\046\024\uffb2\026\uffb2\027\uffb2\030" +
                          "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
                          "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\045\uffb2\047" +
                          "\uffb2\051\uffb2\001\002\000\046\024\uffc0\026\uffc0\027\uffc0" +
                          "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
                          "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0" +
                          "\047\uffc0\051\uffc0\001\002\000\046\024\uffba\026\uffba\027" +
                          "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
                          "\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\045" +
                          "\uffba\047\uffba\051\uffba\001\002\000\024\010\016\020\134" +
                          "\021\135\022\123\023\130\025\122\036\120\037\133\044" +
                          "\125\001\002\000\046\024\uffb5\026\uffb5\027\uffb5\030\uffb5" +
                          "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
                          "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\045\uffb5\047\uffb5" +
                          "\051\uffb5\001\002\000\046\024\uffb4\026\uffb4\027\uffb4\030" +
                          "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
                          "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\045\uffb4\047" +
                          "\uffb4\051\uffb4\001\002\000\026\024\uffcd\026\146\027\145" +
                          "\034\uffcd\035\uffcd\042\uffcd\043\uffcd\045\uffcd\047\uffcd\051" +
                          "\uffcd\001\002\000\020\024\140\035\141\042\uffd2\043\uffd2" +
                          "\045\uffd2\047\uffd2\051\uffd2\001\002\000\024\010\uffd1\020" +
                          "\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1\036\uffd1\037\uffd1" +
                          "\044\uffd1\001\002\000\024\010\016\020\134\021\135\022" +
                          "\123\023\130\025\122\036\120\037\133\044\125\001\002" +
                          "\000\022\024\uffce\034\143\035\uffce\042\uffce\043\uffce\045" +
                          "\uffce\047\uffce\051\uffce\001\002\000\024\010\016\020\134" +
                          "\021\135\022\123\023\130\025\122\036\120\037\133\044" +
                          "\125\001\002\000\026\024\uffcc\026\146\027\145\034\uffcc" +
                          "\035\uffcc\042\uffcc\043\uffcc\045\uffcc\047\uffcc\051\uffcc\001" +
                          "\002\000\024\010\016\020\134\021\135\022\123\023\130" +
                          "\025\122\036\120\037\133\044\125\001\002\000\024\010" +
                          "\016\020\134\021\135\022\123\023\130\025\122\036\120" +
                          "\037\133\044\125\001\002\000\036\024\uffca\026\uffca\027" +
                          "\uffca\030\150\031\152\032\153\033\151\034\uffca\035\uffca" +
                          "\042\uffca\043\uffca\045\uffca\047\uffca\051\uffca\001\002\000" +
                          "\024\010\016\020\134\021\135\022\123\023\130\025\122" +
                          "\036\120\037\133\044\125\001\002\000\024\010\016\020" +
                          "\134\021\135\022\123\023\130\025\122\036\120\037\133" +
                          "\044\125\001\002\000\024\010\016\020\134\021\135\022" +
                          "\123\023\130\025\122\036\120\037\133\044\125\001\002" +
                          "\000\024\010\016\020\134\021\135\022\123\023\130\025" +
                          "\122\036\120\037\133\044\125\001\002\000\042\024\uffc6" +
                          "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
                          "\uffc6\035\uffc6\036\155\037\156\042\uffc6\043\uffc6\045\uffc6" +
                          "\047\uffc6\051\uffc6\001\002\000\024\010\016\020\134\021" +
                          "\135\022\123\023\130\025\122\036\120\037\133\044\125" +
                          "\001\002\000\024\010\016\020\134\021\135\022\123\023" +
                          "\130\025\122\036\120\037\133\044\125\001\002\000\046" +
                          "\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
                          "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\161\041\160" +
                          "\042\uffc1\043\uffc1\045\uffc1\047\uffc1\051\uffc1\001\002\000" +
                          "\024\010\016\020\134\021\135\022\123\023\130\025\122" +
                          "\036\120\037\133\044\125\001\002\000\024\010\016\020" +
                          "\134\021\135\022\123\023\130\025\122\036\120\037\133" +
                          "\044\125\001\002\000\046\024\uffbf\026\uffbf\027\uffbf\030" +
                          "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
                          "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf\047" +
                          "\uffbf\051\uffbf\001\002\000\046\024\uffbe\026\uffbe\027\uffbe" +
                          "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
                          "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe" +
                          "\047\uffbe\051\uffbe\001\002\000\046\024\uffc2\026\uffc2\027" +
                          "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
                          "\036\uffc2\037\uffc2\040\161\041\160\042\uffc2\043\uffc2\045" +
                          "\uffc2\047\uffc2\051\uffc2\001\002\000\042\024\uffc5\026\uffc5" +
                          "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
                          "\uffc5\036\155\037\156\042\uffc5\043\uffc5\045\uffc5\047\uffc5" +
                          "\051\uffc5\001\002\000\042\024\uffc4\026\uffc4\027\uffc4\030" +
                          "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\155" +
                          "\037\156\042\uffc4\043\uffc4\045\uffc4\047\uffc4\051\uffc4\001" +
                          "\002\000\042\024\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
                          "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\155\037\156\042" +
                          "\uffc7\043\uffc7\045\uffc7\047\uffc7\051\uffc7\001\002\000\036" +
                          "\024\uffc9\026\uffc9\027\uffc9\030\150\031\152\032\153\033" +
                          "\151\034\uffc9\035\uffc9\042\uffc9\043\uffc9\045\uffc9\047\uffc9" +
                          "\051\uffc9\001\002\000\046\024\uffbc\026\uffbc\027\uffbc\030" +
                          "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
                          "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc\047" +
                          "\uffbc\051\uffbc\001\002\000\004\045\173\001\002\000\046" +
                          "\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
                          "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
                          "\042\uffb6\043\uffb6\045\uffb6\047\uffb6\051\uffb6\001\002\000" +
                          "\046\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
                          "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
                          "\uffbb\042\uffbb\043\uffbb\045\uffbb\047\uffbb\051\uffbb\001\002" +
                          "\000\046\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
                          "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
                          "\041\uffb9\042\uffb9\043\uffb9\045\uffb9\047\uffb9\051\uffb9\001" +
                          "\002\000\026\010\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
                          "\025\uffd0\036\uffd0\037\uffd0\044\uffd0\045\203\001\002\000" +
                          "\024\010\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0" +
                          "\036\uffd0\037\uffd0\044\uffd0\001\002\000\004\051\201\001" +
                          "\002\000\046\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
                          "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
                          "\uffb7\041\uffb7\042\uffb7\043\uffb7\045\uffb7\047\uffb7\051\uffb7" +
                          "\001\002\000\006\043\207\045\uffa7\001\002\000\046\024" +
                          "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
                          "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
                          "\uffaa\043\uffaa\045\uffaa\047\uffaa\051\uffaa\001\002\000\004" +
                          "\045\206\001\002\000\006\043\uffa6\045\uffa6\001\002\000" +
                          "\046\024\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
                          "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
                          "\uffab\042\uffab\043\uffab\045\uffab\047\uffab\051\uffab\001\002" +
                          "\000\024\010\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025" +
                          "\uffd0\036\uffd0\037\uffd0\044\uffd0\001\002\000\004\045\uffa9" +
                          "\001\002\000\006\043\207\045\uffa7\001\002\000\004\045" +
                          "\uffa8\001\002\000\046\024\uffbd\026\uffbd\027\uffbd\030\uffbd" +
                          "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
                          "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\045\uffbd\047\uffbd" +
                          "\051\uffbd\001\002\000\050\010\uffd8\011\uffd8\012\uffd8\013" +
                          "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
                          "\022\uffd8\023\uffd8\025\uffd8\036\uffd8\037\uffd8\042\uffd8\044" +
                          "\uffd8\046\uffd8\047\uffd8\001\002\000\004\046\uffb0\001\002" +
                          "\000\006\043\223\045\uffad\001\002\000\004\010\016\001" +
                          "\002\000\004\045\221\001\002\000\004\046\uffb1\001\002" +
                          "\000\006\043\uffac\045\uffac\001\002\000\012\004\010\005" +
                          "\012\006\013\007\011\001\002\000\004\045\uffaf\001\002" +
                          "\000\006\043\223\045\uffad\001\002\000\004\045\uffae\001" +
                          "\002\000\026\010\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
                          "\025\uffd0\036\uffd0\037\uffd0\044\uffd0\046\230\001\002\000" +
                          "\024\010\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0" +
                          "\036\uffd0\037\uffd0\044\uffd0\001\002\000\006\042\ufff7\043" +
                          "\ufff7\001\002\000\006\042\ufff3\043\ufff3\001\002\000\006" +
                          "\043\234\047\ufff0\001\002\000\024\010\uffd0\020\uffd0\021" +
                          "\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\037\uffd0\044\uffd0" +
                          "\001\002\000\004\047\236\001\002\000\006\042\ufff2\043" +
                          "\ufff2\001\002\000\004\047\ufff1\001\002\000\060\002\ufffc" +
                          "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\013" +
                          "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
                          "\022\ufffc\023\ufffc\025\ufffc\036\ufffc\037\ufffc\042\ufffc\044" +
                          "\ufffc\046\ufffc\047\ufffc\001\002\000\004\002\001\001\002" +
                          "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
          unpackFromStrings(new String[] {
                  "\000\237\000\012\002\003\003\005\004\006\051\004\001" +
                          "\001\000\002\001\001\000\012\006\016\007\021\011\017" +
                          "\052\020\001\001\000\012\002\014\003\005\004\006\051" +
                          "\004\001\001\000\012\002\013\003\005\004\006\051\004" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\043\034\001\001\000\004\010\023\001\001\000\010" +
                          "\007\025\011\017\052\024\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\010\026\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\010\012\215\044\217\051\216\001\001" +
                          "\000\004\014\036\001\001\000\010\004\041\005\037\051" +
                          "\040\001\001\000\002\001\001\000\036\014\051\015\064" +
                          "\016\066\017\060\020\061\021\044\022\057\023\065\024" +
                          "\054\025\062\026\045\027\056\031\053\033\046\001\001" +
                          "\000\012\006\016\007\021\011\017\052\024\001\001\000" +
                          "\010\004\041\005\042\051\040\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\024\032\136\034\116\035\135\036\126\037\123\040\125" +
                          "\041\130\042\131\052\120\001\001\000\002\001\001\000" +
                          "\012\026\045\027\110\031\053\033\046\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\036\014\051\015\064\016\070\017\060" +
                          "\020\061\021\044\022\057\023\065\024\054\025\062\026" +
                          "\045\027\056\031\053\033\046\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\012\026\045\027\072\031\053\033\046\001\001\000\002" +
                          "\001\001\000\012\026\045\027\074\031\053\033\046\001" +
                          "\001\000\002\001\001\000\012\026\045\027\076\031\053" +
                          "\033\046\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\010\026\103\031\053" +
                          "\033\046\001\001\000\002\001\001\000\034\014\051\015" +
                          "\105\017\060\020\061\021\044\022\057\023\065\024\054" +
                          "\025\062\026\045\027\056\031\053\033\046\001\001\000" +
                          "\002\001\001\000\034\014\051\015\107\017\060\020\061" +
                          "\021\044\022\057\023\065\024\054\025\062\026\045\027" +
                          "\056\031\053\033\046\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\010\026\113\031\053\033" +
                          "\046\001\001\000\002\001\001\000\034\014\051\015\115" +
                          "\017\060\020\061\021\044\022\057\023\065\024\054\025" +
                          "\062\026\045\027\056\031\053\033\046\001\001\000\002" +
                          "\001\001\000\002\001\001\000\010\041\212\042\131\052" +
                          "\120\001\001\000\004\045\174\001\001\000\010\041\173" +
                          "\042\131\052\120\001\001\000\002\001\001\000\002\001" +
                          "\001\000\010\026\171\031\053\033\046\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\010\041\170\042\131\052\120" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\022\034\141" +
                          "\035\135\036\126\037\123\040\125\041\130\042\131\052" +
                          "\120\001\001\000\002\001\001\000\020\035\143\036\126" +
                          "\037\123\040\125\041\130\042\131\052\120\001\001\000" +
                          "\002\001\001\000\016\036\167\037\123\040\125\041\130" +
                          "\042\131\052\120\001\001\000\016\036\146\037\123\040" +
                          "\125\041\130\042\131\052\120\001\001\000\002\001\001" +
                          "\000\014\037\166\040\125\041\130\042\131\052\120\001" +
                          "\001\000\014\037\165\040\125\041\130\042\131\052\120" +
                          "\001\001\000\014\037\164\040\125\041\130\042\131\052" +
                          "\120\001\001\000\014\037\153\040\125\041\130\042\131" +
                          "\052\120\001\001\000\002\001\001\000\012\040\163\041" +
                          "\130\042\131\052\120\001\001\000\012\040\156\041\130" +
                          "\042\131\052\120\001\001\000\002\001\001\000\010\041" +
                          "\162\042\131\052\120\001\001\000\010\041\161\042\131" +
                          "\052\120\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\014\026\204\031\053\033\046\046\203\047\201\001" +
                          "\001\000\010\026\177\031\053\033\046\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\050\207\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\012\026\204\031\053\033\046\047\210\001" +
                          "\001\000\002\001\001\000\004\050\211\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\013\223\001\001\000\006\011\221\052\024" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\012\224\051\216\001\001\000\002\001\001" +
                          "\000\004\013\225\001\001\000\002\001\001\000\012\026" +
                          "\231\031\053\033\046\053\230\001\001\000\010\026\232" +
                          "\031\053\033\046\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\030\234\001\001\000\010\026\236\031\053" +
                          "\033\046\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
  {
    action_obj = new CUP$parser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
          int                        act_num,
          java_cup.runtime.lr_parser parser,
          java.util.Stack            stack,
          int                        top)
          throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Cup generated class to encapsulate user supplied action code.*/
  @SuppressWarnings({"rawtypes", "unchecked", "unused"})
  class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
      this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack            CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
      {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF
        {
          Object RESULT =null;
          int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
          RESULT = start_val;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        /* ACCEPT */
        CUP$parser$parser.done_parsing();
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // program ::= function_decl program
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // program ::= var_decl program
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // program ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // function_decl ::= type identifier para_list compound_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // var_decl ::= type init_declarator_list SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // init_declarator_list ::= init_declarator init_declarator1
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // init_declarator1 ::= COMMA init_declarator init_declarator1
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("init_declarator1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // init_declarator1 ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("init_declarator1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // init_declarator ::= declarator
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("init_declarator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // init_declarator ::= declarator EQ initializer
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("init_declarator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // declarator ::= identifier
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // declarator ::= identifier LBRACKET RBRACKET
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // declarator ::= identifier LBRACKET INTEGER_LITERAL RBRACKET
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // initializer ::= expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("initializer",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // initializer ::= LBRACE expr expr1 RBRACE
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("initializer",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // expr1 ::= COMMA expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expr1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // expr1 ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expr1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // type ::= VOID
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // type ::= BOOLEAN
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // type ::= INT
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // type ::= FLOAT
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // identifier ::= ID
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // compound_stmt ::= LBRACE var_decl1 stmt1 RBRACE
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // var_decl1 ::= var_decl var_decl1
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // var_decl1 ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // stmt1 ::= stmt stmt1
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // stmt1 ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // stmt ::= compound_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // stmt ::= if_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // stmt ::= for_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // stmt ::= while_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // stmt ::= break_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // stmt ::= continue_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // stmt ::= return_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // stmt ::= expr_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // if_stmt ::= IF LPAREN expr RPAREN stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // if_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // for_stmt ::= FOR LPAREN opt_expr SEMICOLON opt_expr SEMICOLON opt_expr RPAREN
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // while_stmt ::= WHILE LPAREN expr RPAREN stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // break_stmt ::= BREAK SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // continue_stmt ::= CONTINUE SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // return_stmt ::= RETURN opt_expr SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // expr_stmt ::= opt_expr SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // opt_expr ::= expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // opt_expr ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // expr ::= assignment_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // assignment_expr ::= or_exprs cond_or_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // or_exprs ::= or_exprs cond_or_expr EQ
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("or_exprs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // or_exprs ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("or_exprs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // cond_or_expr ::= cond_and_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_or_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // cond_or_expr ::= cond_or_expr OROR cond_and_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_or_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // cond_and_expr ::= equality_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_and_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // cond_and_expr ::= cond_and_expr ANDAND equality_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_and_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // equality_expr ::= rel_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // equality_expr ::= equality_expr EQEQ rel_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // equality_expr ::= equality_expr NOTEQ rel_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // rel_expr ::= additive_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // rel_expr ::= rel_expr LT additive_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // rel_expr ::= rel_expr LTEQ additive_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // rel_expr ::= rel_expr GT additive_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // rel_expr ::= rel_expr GTEQ additive_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // additive_expr ::= multiplicative_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // additive_expr ::= additive_expr PLUS multiplicative_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // additive_expr ::= additive_expr MINUS multiplicative_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // multiplicative_expr ::= unary_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // multiplicative_expr ::= multiplicative_expr MULTIPLY unary_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // multiplicative_expr ::= multiplicative_expr DIVIDE unary_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // unary_expr ::= PLUS unary_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // unary_expr ::= MINUS unary_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // unary_expr ::= NOT unary_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // unary_expr ::= primary_expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // primary_expr ::= identifier arg_list
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // primary_expr ::= identifier
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // primary_expr ::= identifier LBRACKET expr RBRACKET
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // primary_expr ::= LPAREN expr RPAREN
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // primary_expr ::= INTEGER_LITERAL
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // primary_expr ::= FLOAT_LITERAL
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // primary_expr ::= BOOLEAN_LITERAL
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // primary_expr ::= STRING_LITERAL
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // para_list ::= LPAREN proper_para_list RPAREN
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("para_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // para_list ::= LPAREN RPAREN
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("para_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // proper_para_list ::= para_decl para_decl1
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("proper_para_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // para_decl1 ::= COMMA para_decl para_decl1
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("para_decl1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // para_decl1 ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("para_decl1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // para_decl ::= type declarator
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("para_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // arg_list ::= LPAREN proper_arg_list RPAREN
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // arg_list ::= LPAREN RPAREN
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // proper_arg_list ::= arg arg1
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("proper_arg_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // arg1 ::= COMMA arg arg1
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("arg1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // arg1 ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("arg1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // arg ::= expr
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /* . . . . . .*/
        default:
          throw new Exception(
                  "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

      }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack            CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception
    {
      return CUP$parser$do_action_part00000000(
              CUP$parser$act_num,
              CUP$parser$parser,
              CUP$parser$stack,
              CUP$parser$top);
    }
  }

}
